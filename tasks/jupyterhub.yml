---
- name: enable apache mods
  apache2_module: name={{ item }}
  with_items:
    - proxy
    - proxy_http
    - proxy_wstunnel
    - rewrite

- name: copy JupyterHub apache config
  template:
    src: "{{ aiidalab_apache_config }}"
    dest: /etc/apache2/sites-available/aiidalab-server.conf
    owner: root
    group: root
    mode: 0644
  register: apache_config

- name: enable JupyterHub apache site
  command: a2ensite aiidalab-server
  args:
    creates: /etc/apache2/sites-enabled/aiidalab-server.conf

- name: disable default site
  command: a2dissite 000-default
  args:
    removes: /etc/apache2/sites-enabled/000-default.conf

- name: Restart apache2
  service:
    name: "apache2"
    state: "reloaded"
  when: apache_config.changed

- name: copy aiidalab logo
  copy:
    src: aiidalab_wide.png
    dest: /etc/jupyterhub/
    owner: root
    group: root
    mode: 0644

- name: copy JupyterHub config
  template:
    src: "{{ aiidalab_server_config }}"
    dest: /etc/jupyterhub/jupyterhub_config.py
    owner: root
    group: root
    mode: 0644
    backup: true

- name: Create templates directory if it does not exist
  ansible.builtin.file:
    path: /etc/jupyterhub/templates
    state: directory
    owner: root
    group: root
    mode: '755'

- name: copy JupyterHub 403.html
  copy:
    src: 403.html
    dest: /etc/jupyterhub/templates/403.html
    owner: root
    group: root
    mode: 0644

- name: create JupyterHub user (adduser)
  user:
    name: "jupyterhub"
    uid: "{{ aiidalab_server_uid }}"
    groups: "docker"
    append: true

- name: create JupyterHub volumes directory
  file:
    path: "/var/jupyterhub/volumes"
    state: directory
    owner: jupyterhub
    group: jupyterhub
    mode: 0755

- name: Create and attach a volume with users home directories
  include_role:
    name: os_create_volume
  vars:
    vol_name: "{{ aiidalab_server_os_home_volume }}"
    vol_size: "{{ aiidalab_server_os_home_volume_size }}"
    mount_point: /var/jupyterhub/volumes
  when: aiidalab_server_os_home_volume is defined


- name: (re)start JupyterHub service
  systemd:
    name: "jupyterhub"
    enabled: true
    daemon_reload: true
    state: "restarted"
  when: cloud_platform is undefined or cloud_platform != 'docker'
